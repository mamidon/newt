---
created: "2019-11-08T15:26:37.012295Z"
creator: insta@0.8.1
source: newtc/src/featurez/syntax/tests.rs
expression: approval_document
---
====text====
============

    {let x = 1;
	let y = 2;
	let c = x * 2 + y;}
	
====tokens====
============
[
    WhiteSpace[5],
    LeftBrace[1],
    Let[3],
    WhiteSpace[1],
    Identifier[1],
    WhiteSpace[1],
    Equals[1],
    WhiteSpace[1],
    IntegerLiteral[1],
    SemiColon[1],
    WhiteSpace[2],
    Let[3],
    WhiteSpace[1],
    Identifier[1],
    WhiteSpace[1],
    Equals[1],
    WhiteSpace[1],
    IntegerLiteral[1],
    SemiColon[1],
    WhiteSpace[2],
    Let[3],
    WhiteSpace[1],
    Identifier[1],
    WhiteSpace[1],
    Equals[1],
    WhiteSpace[1],
    Identifier[1],
    WhiteSpace[1],
    Star[1],
    WhiteSpace[1],
    IntegerLiteral[1],
    WhiteSpace[1],
    Plus[1],
    WhiteSpace[1],
    Identifier[1],
    SemiColon[1],
    RightBrace[1],
    WhiteSpace[2],
    EndOfFile[0]
]
====events====
============
[
    BeginNode {
        kind: StmtListStmt,
        is_forward_parent: false,
        forward_parent_offset: None
    },
    Trivia {
        kind: WhiteSpace,
        length: 5
    },
    Token {
        kind: LeftBrace,
        length: 1
    },
    BeginNode {
        kind: VariableDeclarationStmt,
        is_forward_parent: false,
        forward_parent_offset: None
    },
    Token {
        kind: Let,
        length: 3
    },
    Trivia {
        kind: WhiteSpace,
        length: 1
    },
    Token {
        kind: Identifier,
        length: 1
    },
    Trivia {
        kind: WhiteSpace,
        length: 1
    },
    Token {
        kind: Equals,
        length: 1
    },
    Trivia {
        kind: WhiteSpace,
        length: 1
    },
    BeginNode {
        kind: LiteralExpr,
        is_forward_parent: false,
        forward_parent_offset: None
    },
    Token {
        kind: IntegerLiteral,
        length: 1
    },
    EndNode,
    Token {
        kind: SemiColon,
        length: 1
    },
    Trivia {
        kind: WhiteSpace,
        length: 2
    },
    EndNode,
    BeginNode {
        kind: VariableDeclarationStmt,
        is_forward_parent: false,
        forward_parent_offset: None
    },
    Token {
        kind: Let,
        length: 3
    },
    Trivia {
        kind: WhiteSpace,
        length: 1
    },
    Token {
        kind: Identifier,
        length: 1
    },
    Trivia {
        kind: WhiteSpace,
        length: 1
    },
    Token {
        kind: Equals,
        length: 1
    },
    Trivia {
        kind: WhiteSpace,
        length: 1
    },
    BeginNode {
        kind: LiteralExpr,
        is_forward_parent: false,
        forward_parent_offset: None
    },
    Token {
        kind: IntegerLiteral,
        length: 1
    },
    EndNode,
    Token {
        kind: SemiColon,
        length: 1
    },
    Trivia {
        kind: WhiteSpace,
        length: 2
    },
    EndNode,
    BeginNode {
        kind: VariableDeclarationStmt,
        is_forward_parent: false,
        forward_parent_offset: None
    },
    Token {
        kind: Let,
        length: 3
    },
    Trivia {
        kind: WhiteSpace,
        length: 1
    },
    Token {
        kind: Identifier,
        length: 1
    },
    Trivia {
        kind: WhiteSpace,
        length: 1
    },
    Token {
        kind: Equals,
        length: 1
    },
    Trivia {
        kind: WhiteSpace,
        length: 1
    },
    BeginNode {
        kind: VariableExpr,
        is_forward_parent: false,
        forward_parent_offset: Some(
            4
        )
    },
    Token {
        kind: Identifier,
        length: 1
    },
    Trivia {
        kind: WhiteSpace,
        length: 1
    },
    EndNode,
    BeginNode {
        kind: BinaryExpr,
        is_forward_parent: true,
        forward_parent_offset: Some(
            8
        )
    },
    Token {
        kind: Star,
        length: 1
    },
    Trivia {
        kind: WhiteSpace,
        length: 1
    },
    BeginNode {
        kind: LiteralExpr,
        is_forward_parent: false,
        forward_parent_offset: None
    },
    Token {
        kind: IntegerLiteral,
        length: 1
    },
    Trivia {
        kind: WhiteSpace,
        length: 1
    },
    EndNode,
    EndNode,
    BeginNode {
        kind: BinaryExpr,
        is_forward_parent: true,
        forward_parent_offset: None
    },
    Token {
        kind: Plus,
        length: 1
    },
    Trivia {
        kind: WhiteSpace,
        length: 1
    },
    BeginNode {
        kind: VariableExpr,
        is_forward_parent: false,
        forward_parent_offset: None
    },
    Token {
        kind: Identifier,
        length: 1
    },
    EndNode,
    EndNode,
    Token {
        kind: SemiColon,
        length: 1
    },
    EndNode,
    Token {
        kind: RightBrace,
        length: 1
    },
    Trivia {
        kind: WhiteSpace,
        length: 2
    },
    EndNode
]
====tree====
============
┗ StmtListStmt
  ┠ WhiteSpace '
    '
  ┠ LeftBrace '{'
  ┠ VariableDeclarationStmt
  ┃ ┠ Let 'let'
  ┃ ┠ WhiteSpace ' '
  ┃ ┠ Identifier 'x'
  ┃ ┠ WhiteSpace ' '
  ┃ ┠ Equals '='
  ┃ ┠ WhiteSpace ' '
  ┃ ┠ LiteralExpr
  ┃ ┃ ┗ IntegerLiteral '1'
  ┃ ┠ SemiColon ';'
  ┃ ┗ WhiteSpace '
	'
  ┠ VariableDeclarationStmt
  ┃ ┠ Let 'let'
  ┃ ┠ WhiteSpace ' '
  ┃ ┠ Identifier 'y'
  ┃ ┠ WhiteSpace ' '
  ┃ ┠ Equals '='
  ┃ ┠ WhiteSpace ' '
  ┃ ┠ LiteralExpr
  ┃ ┃ ┗ IntegerLiteral '2'
  ┃ ┠ SemiColon ';'
  ┃ ┗ WhiteSpace '
	'
  ┠ VariableDeclarationStmt
  ┃ ┠ Let 'let'
  ┃ ┠ WhiteSpace ' '
  ┃ ┠ Identifier 'c'
  ┃ ┠ WhiteSpace ' '
  ┃ ┠ Equals '='
  ┃ ┠ WhiteSpace ' '
  ┃ ┠ BinaryExpr
  ┃ ┃ ┠ BinaryExpr
  ┃ ┃ ┃ ┠ VariableExpr
  ┃ ┃ ┃ ┃ ┠ Identifier 'x'
  ┃ ┃ ┃ ┃ ┗ WhiteSpace ' '
  ┃ ┃ ┃ ┠ Star '*'
  ┃ ┃ ┃ ┠ WhiteSpace ' '
  ┃ ┃ ┃ ┗ LiteralExpr
  ┃ ┃ ┃   ┠ IntegerLiteral '2'
  ┃ ┃ ┃   ┗ WhiteSpace ' '
  ┃ ┃ ┠ Plus '+'
  ┃ ┃ ┠ WhiteSpace ' '
  ┃ ┃ ┗ VariableExpr
  ┃ ┃   ┗ Identifier 'y'
  ┃ ┗ SemiColon ';'
  ┠ RightBrace '}'
  ┗ WhiteSpace '
	'

